package com.nano.datacollection.parsedata.parser;

import com.alibaba.fastjson.JSON;
import com.nano.datacollection.DeviceData;
import com.nano.datacollection.parsedata.DataCons;
import com.nano.datacollection.parsedata.DeviceDataParser;
import com.nano.datacollection.parsedata.entity.DataBaoLaiTeA8;
import com.nano.datacollection.parsedata.UpdateDataEntity;

import java.util.ArrayList;
import java.util.List;

/**
 * Description: 宝莱特A8数据解析器
 *
 * 注意：演示模式会在一条报文中同时发出两组温度数据以及有创血压的数据，所以屏幕会显示两个不同的值。
 * 无创血压: E5 NIBP(1条)  Sys:120  Map:90  Dia:80
 * 有创血压: E6 IBP(2条)
 *
 * @version: 1.0
 * @author: nano
 * @date: 2021/1/9 14:16
 */
public class DataParserBaoLaiTeA8 implements DeviceDataParser {

    /**
     * 数据开始标志
     */
    private static final String START_FLAG = "FFD1";

    /**
     * 数据块的开头
     */
    private static final String DATA_BLOCK_START_FLAG = "E";


    /**
     * 解析数据
     *
     * @param deviceCode 仪器号
     * @param serialNumber 序列号
     * @param deviceOriginData 原始数据
     * @return 数据
     */
    @Override
    public DeviceData parseData(int deviceCode, String serialNumber, String deviceOriginData) {

        DataBaoLaiTeA8 dataBaoLaiTe = new DataBaoLaiTeA8();
        dataBaoLaiTe.setSerialNumber(serialNumber);

        if (verifyData(deviceOriginData)) {

            // 正常的数据报文
            // FFD1000000F100 0A09 0C E001057908602F2F7F400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000E4320003047F3FE4330003047F3FE616006B095E075E075E0720062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006E617006B095E075E075E0720062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006200620062006E3040067FF0A0004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400E102011B00FF000000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000400000E20B00037F0702E503000A10010000803F763F763F0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            // 演示模式报文12导联数据


            // 去除数据前面的无关信息
            String deviceData = deviceOriginData.substring(20);
            List<String> dataBlockList = new ArrayList<>();
            // 演示模式的一条数据的数据块
            // data
            // data:E4320003007402
            // data:E4330003007402
            // data:E614006B0818116C0E080E64097809000A040A040A040A040A7C0974096C09640960095C09580954094C09480944093C093809300928092009180918091809180918091809180918091809180914091409140910090C090C0908090809040904090409040900097C087C087C087C08
            // data:E615006B0818116C0E080E64097809000A040A040A040A040A7C0974096C09640960095C09580954094C09480944093C093809300928092009180918091809180918091809180918091809180914091409140910090C090C0908090809040904090409040900097C087C087C087C08
            // data:E102011B00630000000650000550000450000250000150000150000150000150000350000751000C51001252001954002055002A56003458003C5900435A00485B004B5C004D5C004C5C004A5B00485B00445A003F5A003A59003458002E57002A56002656002455002255002055002055002155002255002255002355012355002355002255002155002055001E54001C54001B5400195400185300175300
            // data:E20B0003500002
            // data:E503000A00010000300904072006

            // 这里将有效数据进行拆分获取到各个数据块的内容
            while (deviceData.startsWith(DATA_BLOCK_START_FLAG)) {
                // 4-8位为数据长度位
                int dataLength = getLength(deviceData.substring(4, 8));
                // 获取一个数据块
                String dataBlock = deviceData.substring(0, dataLength * 2 + 8);
                // 把数据块存入列表中 每个记录代表一条小类的数据
                dataBlockList.add(dataBlock);
                // 不断裁剪真实数据
                if (deviceData.length() >= dataLength * 2 + 8) {
                    deviceData = deviceData.substring(dataLength * 2 + 8);
                }
            }
            // 打印出各个数据块
            // for (String data : dataBlockList) {
            //   System.out.println("data:" + data);
            // }

            // 遍历解析列表中所有数据块
            for (String blockData : dataBlockList){
                // 4-8位为数据长度位 获取每个小数据块的长度
                if (blockData.length() > 8) {
                    int dataBlockLength = getLength(blockData.substring(4, 8));
                    if (verifyDataBlock(blockData, dataBlockLength)){
                        // 标识每个数据块的定义 如E0 E1等
                        parseDataBlock(dataBaoLaiTe, blockData);
                    }
                }
            }
        }

        String dataString = JSON.toJSONString(dataBaoLaiTe);
        return new DeviceData(deviceCode, dataBaoLaiTe, JSON.toJSONString(new UpdateDataEntity(deviceCode, dataString)));
    }

    /**
     * 分别解析数据块,并获取各个数据块对应的数值,然后设置到数据实体中
     *
     * @param dataBaoLaiTe 宝莱特数据实体
     * @param blockData 数据
     */
    private static void parseDataBlock(DataBaoLaiTeA8 dataBaoLaiTe, String blockData){

        // 数据块的定义
        String blockDefinition = blockData.substring(0, 2);
        switch (blockDefinition){

            // ECG数据块 心率数据块 获取心率数据 (屏幕顶上的 HR 值 80)
            case "E0":
                // data:E0 01 0F55 08610000503F5A3F673F513F7A3F6E3F533F5A3F653F5B3F683F503F793F6E3F533F5B3F623F5D3F683F523F773F6A3F553F5C3F5F3F5D3F673F583F7D3F6E3F583F5E3F623F5D3F693F553F793F6C3F563F5B3F623F5D3F693F593F7A3F6F3F573F5B3F663F5D3F6A3F573F7A3F6F3F573F5D3F633F5F3F6B3F593F7B3F6C3F583F5E3F633F613F6C3F5D3F7D3F6E3F5A3F5E3F663F613F6B3F553F783F6A3F583F5A3F663F603F6B3F583F7A3F6F3F593F5D3F6A3F623F6B3F573F7B3F6E3F5A3F5F3F653F623F6C3F593F7A3F6C3F593F613F633F603F6D3F5D3F7D3F703F5C3F613F663F603F6C3F563F783F6E3F5B3F5E3F673F613F6C3F593F793F723F5C3F5E3F6B3F623F6C3F573F793F703F5A3F5F3F693F633F6E3F5D3F783F6C3F5B3F633F683F643F6E3F613F7E3F713F5D3F643F6B3F633F6E3F5C3F7A3F6F3F5F3F613F693F633F6E3F603F7C3F743F603F613F6C3F633F6D3F5C3F7C3F723F5C3F613F683F643F6F3F5C3F783F6E3F5C3F633F673F663F6E3F613F7C3F723F613F643F6C3F663F6E3F5C3F7A3F6F3F613F623F693F663F6F3F5F3F7D3F733F623F623F6D3F673F703F5D3F7C3F713F613F633F6A3F663F713F5D3F783F6F3F5F3F653F6B3F673F713F623F7C3F733F623F683F6D3F6C3F733F6340013F743F663F693F6B3F743F773F6F40063F7E3F713F723F733F7F3F7C3F78400A40033F793F7A3F79400E4006400A400F400A4008400D40044014400C4016401B401540114016400E401F4011401C401F4016401D402140134025401440234025401D402540284018402E401A4028402940224027402D401B4034401F402D402B4023402D4032401F4033401E4034402E4028402F403240244032401C402D402B4024402F403240204032401B4030402C40274030403140204032401C402E40284026402C40314021402B401A40254021401D4025402B401E4023401440234022401C40214024401B4019400A4017401A40124019401A4010400F400540134019401240154014400D40094001400C4014400F400B400D40063F7A3F7A3F7A400740013F793F7D3F7D3F6E3F733F6F40023F7C3F6E3F703F793F623F6C3F5A3F753F6D3F5E3F633F6B3F613F6C3F5B3F773F703F5E3F613F6B3F613F6E3F5C3F773F703F5E3F603F693F633F6F3F5B3F733F6D3F603F603F6B3F613F6E3F5F3F753F6F3F5F3F613F6E3F613F6B3F5A3F733F6B3F5D3F603F683F633F6D3F603F783F713F623F613F6A3F663F6F3F623F7B3F743F633F633F6A3F673F703F603F763F733F633F643F6C3F653F6E3F603F753F733F623F623F6F3F633F6D3F593F713F6C3F5D3F603F683F663F6F3F603F783F713F633F643F6B3F673F723F643F7C3F733F643F653F6B3F683F723F633F763F713F643F663F6C3F653F703F653F783F743F653F663F703F653F6F3F5F3F743F6C3F5F3F633F683F663F703F643F783F723F653F663F6D3F693F723F663F7A3F753F663F663F6B3F693F713F643F763F723F673F673F6D3F683F6E3F663F773F733F643F653F703F5F3F693F5B3F763F6D3F5D3F5D3F67BF543F5F3F573F7A3F6E3F5C3F523F603F483F563F473F7C3F6A3F543F403F503F373F463F2F3F783F633F473F223F393F423F4B3F3B3F7E3F6A3F503F233F3C402840104025400F400D402540073F72410F4059412640264041410840794043417A41274228403E407441704178411D431842184363405F413A4308433242244377425A44604077416C43684427427F44374310454140724179442A450E43544404427445084047413343634468434643214236440040024035424D437E430041774146420E3F0A3E5B4046423B417541024078406D3E3B3D4C3F15413041193F5F400C3E7A3D443B763D103F6840093F153F5B3E0B3D1C3B283C203F063F423F003F483D693D313B3F3C163E613F1B3F153F483E223E1F3C713D203E763F223F263F4B3E613E793E083E133F103F363F3E3F543F253F5F3F393F203F303F463F473F583F4140003F773F513F3F3F523F4C3F593F49400C400B3F623F473F553F4C3F5C3F48400940093F653F4B3F543F493F5B3F49400940083F643F493F573F493F5A3F44400340033F5E3F453F533F4C3F5B3F4B4007400A3F643F473F593F4F3F5D3F4F400B40113F673F4D3F5C3F513F5F3F514007400E3F6A3F533F5D3F503F5C3F56400A400F3F6A3F523F603F4F3F5B3F4E4004400A3F663F4E3F5B3F533F5D3F55400740133F6E3F523F613F573F613F5A400A40183F713F583F623F573F633F5C400B40163F733F5E3F603F563F623F60400F40173F743F603F643F583F643F59400A40143F743F5B3F623F5D3F663F60400C401C3F7D3F5F3F683F603F693F64400C40203F7F3F633F693F643F6C3F67400B401A40023F663F683F653F6D3F6D4010401B40043F673F6B3F683F713F68400D401740053F663F6A3F6D3F733F72400F401F400A3F6A3F6F3F723F753F784012402640113F6F3F743F753F753F7D4012402740183F743F753F753F7840034016402C40193F773F793F773F7A40004011402B401C3F763F793F783F7940064012403040223F7A3F7C3F7A3F7940094013403140273F7C3F7E3F7D3F7C40094010402A402940003F7D3F7F3F7D401140174030402B4001400340024000401040184033402E400240074003400040154019403940334002400C4008400240194019403C40384007400D400C4005401840114034403A400C4009400B4006401D4015403A403C400E400D40104006401D40144038403C400C400E
                // byte6 Bit0-1 心率高2位  // 00
                String part1 = blockData.substring(12, 14);
                // [0][0] 低两位取后面一个0
                char[] chars1 = part1.toCharArray();

                // 0000 -- 取低2位
                String highPart = getCharBinaryString(chars1[1]).substring(2);

                // Byte8为心率值 如 7F 低7位  范围0-300  0111 1111  // 50
                String part2 = blockData.substring(16, 18);
                // [5][0]
                char[] chars2 = part2.toCharArray();
                // 5---0101 低 7位 ，取101配合后面的0000
                String lowPart1 = getCharBinaryString(chars2[0]).substring(1);
                // 0---0000
                String lowPart2 = getCharBinaryString(chars2[1]);
                // 低7位 101 0000
                String lowPart = lowPart1 + lowPart2;
                String heartRateString = highPart + lowPart;
                // 心率值
                int heartRate = Integer.parseInt(heartRateString, 2);
                // 合法性检验
                if (heartRate >= 0 && heartRate <= 300) {
                    dataBaoLaiTe.setHr(heartRate);
                }
                break;

            // 血氧数据块 获取血氧值 SPO2 (演示模式99)
            case "E1":
                // Byte 5 血氧值
                // Bit 6,5,4,3,2,1,0 血氧值 0~100, 127 无效  FF
                // data:E1 0201 1B00 63 0000000C51000B51000951000851000650000550000450000250000150000150000150000150000350000751000C51001252001954002055002A56003458003C5900435A00485B004B5C004D5C004C5C004A5B00485B00445A003F5A003A59003458002E57002A56002656002455002255002055002055002155002255002255002355002355002355002255002155002055001E54001C5400
                // 解析血氧值
                char[] bloodOxygenChars = blockData.substring(10, 12).toCharArray();
                String[] result = new String[2];
                result[0] = getCharBinaryString(bloodOxygenChars[0]).substring(1);
                result[1] = getCharBinaryString(bloodOxygenChars[1]);
                int bloodOxygenValue = Integer.parseInt(result[0] + result[1], 2);
                if (bloodOxygenValue >= 0 && bloodOxygenValue <= 100) {
                    dataBaoLaiTe.setSpo2(bloodOxygenValue);
                }
                break;

            // Pulse数据块 一个脉搏值
            case "E2":
                // E2 0B 0003 5000 02
                // 脉搏用两个字节表示  5000
                // Byte4 Bit 6~0 脉率值低 7 位   Bit 7-0
                // Byte5 Bit 1~0 脉率值高 2 位   Bit 2-0： 有效 1： 无效 脉率无效位   Bit 7~3 00000
                // 得到脉搏的字符数据,即 5 0 0 0
                char[] pulseChars = blockData.substring(8, 12).toCharArray();
                // 5   0            0   0
                // 01111111         00000111
                String[] pulseString = new String[4];
                // 5
                pulseString[0] = getCharBinaryString(pulseChars[0]).substring(1);
                pulseString[1] = getCharBinaryString(pulseChars[1]);
                pulseString[2] = getCharBinaryString(pulseChars[2]).substring(0, 2);
                pulseString[3] = getCharBinaryString(pulseChars[3]);
                int pulseValue = Integer.parseInt(pulseString[3] + pulseString[0] + pulseString[1], 2);
                if (0 <= pulseValue && pulseValue <= 400){
                    // 有效值
                    dataBaoLaiTe.setPr(pulseValue);
                }
                break;

            // RESP数据量 (界面没有展示,同时演示模式也没发送!!!)
            case "E3":
//                System.out.println("E3" + blockData);
//                // E304 0067 FF 0A 0004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400
//                // 呼吸率：FF byte4 即为呼吸率  byte5 Bit0 为是否有效判断，0位有效
//                int breathRate = Integer.parseInt(blockData.substring(8, 10), 2);
//                char[] validationString = blockData.substring(11, 12).toCharArray();
//                String validation = getCharBinaryString(validationString[0]).substring(4);
//                // 有效数据
//                if ("0".equals(validation) && breathRate >= 0 && breathRate <= 100) {
//                    dataBaoLaiTe.setBreatheRate(breathRate);
//                }
                break;

            // 体温数据块 获取体温数据 (演示模式传出来两个温度值,分别计算之后得到一个温度差值)
            case "E4":
                // E4 33 0003 00 7402
                // byte5 byte6 组合为体温数据
                // byte5 Bit6-0:体温低7位   byte6 Bit5-0:体温高6位
                // 体温 = （体温值高6位 * 128 + 体温值低7位）* 0.01
                char[] temp = blockData.substring(10).toCharArray();
                String[] tempString = new String[4];
                // 7:0111
                tempString[0] = getCharBinaryString(temp[0]).substring(1);
                // F:1111
                tempString[1] = getCharBinaryString(temp[1]);
                // 3:0011
                tempString[2] = getCharBinaryString(temp[2]).substring(2);
                // F:1111
                tempString[3] = getCharBinaryString(temp[3]);
                int temperaturePart1 = Integer.parseInt(tempString[2] + tempString[3], 2) * 128;
                int temperaturePart2 = Integer.parseInt(tempString[0] + tempString[1], 2);
                // 协议上写乘以0.01，实际乘0.1才对
                double temperature = (temperaturePart1 + temperaturePart2) * 0.1;
                if (temperature > 0 && temperature <= 100) {
                    // 如果温度1还没设置
                    if (dataBaoLaiTe.getTemperature1() == DataCons.INVALID_DATA_DOUBLE) {
                        dataBaoLaiTe.setTemperature1(temperature);
                        // 如果温度1已经设置则设置温度2,同时计算温度差
                    } else {
                        dataBaoLaiTe.setTemperature2(temperature);
                        dataBaoLaiTe.setTemperatureDifference(Math.abs(dataBaoLaiTe.getTemperature1() - dataBaoLaiTe.getTemperature2()));
                    }
                }
                break;

            // NIBP数据块  (无创血压：三个数据 演示模式中：80 90 120 位置在右下角 Sys:120  Map:90  Dia:80)
            case "E5":
                // NIBP 测量时的压力不送， 只送状态和测量结果（如果有的话）
                // byte8-byte13 是数据位
                // E5 03 000A 00010000 300904072006
                // 3009 SYS
                // 0407 MAP
                // 2006 DIA
                // 压力 = (压力值高 6 位*128 + 压力值低 7 位) * 0.1mmHg
                // byte10 Bit 6~0 : MAP 低7位
                // byte11 Bit 5~0 : MAP 高6位
                boolean isNibpValidate = false;
                char[] validationChar = blockData.substring(11, 12).toCharArray();
                if ("0".equals(getCharBinaryString(validationChar[0]).substring(0, 1))) {
                    isNibpValidate = true;
                }
                char[] nibpChars = blockData.substring(16).toCharArray();
                String[] nibpString = new String[12];
                // SYS低七位
                nibpString[0] = getCharBinaryString(nibpChars[0]).substring(1);
                nibpString[1] = getCharBinaryString(nibpChars[1]);
                // SYS高6位
                nibpString[2] = getCharBinaryString(nibpChars[2]).substring(2);
                nibpString[3] = getCharBinaryString(nibpChars[3]);
                int nibpSysHigh = Integer.parseInt(nibpString[2] + nibpString[3], 2);
                int nibpSysLow = Integer.parseInt(nibpString[0] + nibpString[1], 2);
                double nibpSys = (nibpSysHigh * 128 + nibpSysLow) * 0.1;
                // MAP低7位
                nibpString[4] = getCharBinaryString(nibpChars[4]).substring(1);
                nibpString[5] = getCharBinaryString(nibpChars[5]);
                // MAP高6位
                nibpString[6] = getCharBinaryString(nibpChars[6]).substring(2);
                nibpString[7] = getCharBinaryString(nibpChars[7]);
                int nibpMapHigh = Integer.parseInt(nibpString[6] + nibpString[7], 2);
                int nibpMapLow = Integer.parseInt(nibpString[4] + nibpString[5], 2);
                double nibpMap = (nibpMapHigh * 128 + nibpMapLow) * 0.1;

                // DIA
                nibpString[8] = getCharBinaryString(nibpChars[8]).substring(1);
                nibpString[9] = getCharBinaryString(nibpChars[9]);
                nibpString[10] = getCharBinaryString(nibpChars[10]).substring(2);
                nibpString[11] = getCharBinaryString(nibpChars[11]);
                int nibpDiaHigh = Integer.parseInt(nibpString[10] + nibpString[11], 2);
                int nibpDiaLow = Integer.parseInt(nibpString[8] + nibpString[9], 2);
                double nibpDia = (nibpDiaHigh * 128 + nibpDiaLow) * 0.1;

                if (isNibpValidate) {
                    dataBaoLaiTe.setNibpSys(nibpSys);
                    dataBaoLaiTe.setNibpMap(nibpMap);
                    dataBaoLaiTe.setNibpDia(nibpDia);
                }
                break;

            // 有创血压数据块  三个值 80 90 120----P2
            // 演示模式会传出两个 E6的字符串,分别对应屏幕中间的P1与P2的三个值
            case "E6":
                // data:E614006B0818116C0E080E64097809000A040A040A040A040A7C0974096C09640960095C09580954094C09480944093C093809300928092009180918091809180918091809180918091809180914091409140910090C090C0908090809040904090409040900097C087C087C087C08
                // data:E615006B0818116C0E080E64097809000A040A040A040A040A7C0974096C09640960095C09580954094C09480944093C093809300928092009180918091809180918091809180918091809180914091409140910090C090C0908090809040904090409040900097C087C087C087C08
                // E6 14 006B 08 18116C0E080E 74087008700870086C086C0860085C085C08600860085C08600860086008640870087C080C091C09380950095C096C097C09040A040A040A040A000A780970096809640960095C095409500948094409400934093C092C0924091C091809180918091809
                // 判断是否有效
                boolean isIbpValid = false;
                char[] isIbpValidChar = blockData.substring(9, 10).toCharArray();
                if ("0".equals(getCharBinaryString(isIbpValidChar[0]).substring(2, 3))) {
                    isIbpValid = true;
                }
                char[] ibpChars = blockData.substring(10, 22).toCharArray();
                String[] ibpString = new String[12];
                // SYS低七位
                ibpString[0] = getCharBinaryString(ibpChars[0]).substring(1);
                ibpString[1] = getCharBinaryString(ibpChars[1]);
                // SYS高6位
                ibpString[2] = getCharBinaryString(ibpChars[2]).substring(2);
                ibpString[3] = getCharBinaryString(ibpChars[3]);

                int ibpSysHigh = Integer.parseInt(ibpString[2] + ibpString[3], 2);
                int ibpSysLow = Integer.parseInt(ibpString[0] + ibpString[1], 2);
                double ibpSys = (ibpSysHigh * 128 + ibpSysLow) * 0.1 - 100;
                // MAP低7位
                ibpString[4] = getCharBinaryString(ibpChars[4]).substring(1);
                ibpString[5] = getCharBinaryString(ibpChars[5]);
                // MAP高6位
                ibpString[6] = getCharBinaryString(ibpChars[6]).substring(2);
                ibpString[7] = getCharBinaryString(ibpChars[7]);

                int ibpMapHigh = Integer.parseInt(ibpString[6] + ibpString[7], 2);
                int ibpMapLow = Integer.parseInt(ibpString[4] + ibpString[5], 2);
                double ibpMap = (ibpMapHigh * 128 + ibpMapLow) * 0.1 - 100;

                // DIA
                ibpString[8] = getCharBinaryString(ibpChars[8]).substring(1);
                ibpString[9] = getCharBinaryString(ibpChars[9]);
                ibpString[10] = getCharBinaryString(ibpChars[10]).substring(2);
                ibpString[11] = getCharBinaryString(ibpChars[11]);
                int ibpDiaHigh = Integer.parseInt(ibpString[10] + ibpString[11], 2);
                int ibpDiaLow = Integer.parseInt(ibpString[8] + ibpString[9], 2);
                double ibpDia = (ibpDiaHigh * 128 + ibpDiaLow) * 0.1 - 100;

                // 由于有两组有创血压IBP的值,所以需要分别设置
                if (isIbpValid) {
                    // 说明没有设置P1
                    if (dataBaoLaiTe.getIbpSys1() == DataCons.INVALID_DATA_DOUBLE) {
                        dataBaoLaiTe.setIbpSys1(ibpSys);
                        dataBaoLaiTe.setIbpMap1(ibpMap);
                        dataBaoLaiTe.setIbpDia1(ibpDia);
                    } else {
                        dataBaoLaiTe.setIbpSys2(ibpSys);
                        dataBaoLaiTe.setIbpMap2(ibpMap);
                        dataBaoLaiTe.setIbpDia2(ibpDia);
                    }
                }

                break;

            default:
        }

    }


    /**
     * 验证仪器数据格式
     *
     * @param data 原始数据
     * @return 是否合格
     */
    @Override
    public boolean verifyData(String data) {
        return data.startsWith(START_FLAG);
    }


    /**
     * 验证数据块的正确性
     * @param realData 数据块
     * @param dataBlockLength 数据长度
     * @return 是否合格
     */
    private static boolean verifyDataBlock(String realData, int dataBlockLength) {
        return realData.length() == dataBlockLength * 2 + 8;
    }


    /**
     * 根据数据的长度字符串获取参数的长度
     * @param lengthData 长度字符串
     * @return 长度
     */
    private static int getLength(String lengthData){
        StringBuilder builder = new StringBuilder();
        char[] array = lengthData.toCharArray();
        String[] resultBinary = new String[4];
        for (int i = 0; i < array.length; i++){
            resultBinary[i] = getCharBinaryString(array[i]);
        }
        builder.append("00").append(resultBinary[0].substring(1)).append(resultBinary[1]).append(resultBinary[2].substring(1)).append(resultBinary[3]);
        return Integer.parseInt(builder.toString(), 2);
    }

    /**
     * 根据字符获取其对应的二进制字符串
     * @param a 字符
     * @return 对应二进制串
     */
    private static String getCharBinaryString(char a){
        switch (a){
            case '0': return "0000";
            case '1': return "0001";
            case '2': return "0010";
            case '3': return "0011";
            case '4': return "0100";
            case '5': return "0101";
            case '6': return "0110";
            case '7': return "0111";
            case '8': return "1000";
            case '9': return "1001";
            case 'A': return "1010";
            case 'B': return "1011";
            case 'C': return "1100";
            case 'D': return "1101";
            case 'E': return "1110";
            case 'F': return "1111";
            default: return "0000";
        }
    }


}
